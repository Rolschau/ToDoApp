using ToDoWebApi.BLL.Models;
using Hanssens.Net;
using ToDoWebApi.DAL.Interfaces;
using ToDoWebApi.DAL.Models;
using ToDoWebApi.Controllers;
using ToDoWebApi.BLL.Sorters;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;

namespace ToDoWebApi.DAL.Services
{
    public class DatabaseService : IDatabaseService
    {
        private readonly ILogger<ToDoController> _logger;
        private readonly LocalStorage _localStorage;
        private readonly ILocalStorageConfiguration _localStorageConfiguration;
        /// <summary>
        /// Converts a ToDo DTO to a ToDo item. This separates the item format externally and internally toward storage.
        /// </summary>
        /// <param name="toDoDTO"></param>
        /// <returns>A ToDo item matching the format in the database</returns>
        private ToDo Convert(ToDoDTO toDoDTO) => new() { Id = toDoDTO.Id, Value = toDoDTO.Value, Done = toDoDTO.Done, Order = toDoDTO.Order };

        /// <summary>
        /// Converts a ToDo to a ToDo DTO item. This separates the item format externally and internally toward storage.
        /// </summary>
        /// <param name="toDo"></param>
        /// <returns>A ToDoDTO item matching the format used externally</returns>
        private ToDoDTO Convert(ToDo toDo) => new() { Id = toDo.Id, Value = toDo.Value, Done = toDo.Done, Order = toDo.Order };

        /// <summary>
        /// Gets a new id.
        /// <para>Note: Remember to check if the id exists at the destination, keep trying until success.</para>
        /// </summary>
        /// <returns>A string of current UTC ticks</returns>
        private string GetNewId() => DateTimeOffset.Now.Ticks.ToString();

        public DatabaseService(IOptions<LocalStorageConfiguration> localStorageConfigurationOptions, ILogger<ToDoController> logger)
        {
            _localStorageConfiguration = localStorageConfigurationOptions.Value;
            _logger = logger;

            // initialize LocalStorage with a password of your choice
            _localStorage = new LocalStorage(_localStorageConfiguration, "todopassword");
        }

        private void PersistRetry()
        {
            int maxAttempts = 5;
            for (int i = 1; i <= maxAttempts; i++)
            {
                try
                {
                    _localStorage.Persist();
                }
                catch
                {
                    Thread.Sleep(500);
                    if (i == maxAttempts)
                        throw;
                }
            }
        }

        /// <summary>
        /// Create a todo in the database.
        /// </summary>
        /// <param name="todo"></param>
        /// <returns></returns>
        public Task<ToDoDTO> CreateAsync(ToDoDTO toDoDTO)
        {
            while (toDoDTO.Id is null || _localStorage.Exists(toDoDTO.Id))
                toDoDTO.Id = GetNewId();
            _localStorage.Store(key: toDoDTO.Id, instance: Convert(toDoDTO));
            PersistRetry();
            return Task.FromResult((ToDoDTO)toDoDTO.Clone());
        }

        /// <summary>
        /// Return all todos from database.
        /// </summary>
        /// <returns></returns>
        public Task<List<ToDoDTO>> GetAsync(bool excludeDone = false)
        {
            List<ToDoDTO> todos = new();
            foreach (string key in _localStorage.Keys())
            {
                var todo = Convert(_localStorage.Get<ToDo>(key));
                if (excludeDone && todo.Done)
                    continue;
                todos.Add(todo);
            }
            todos.Sort(new ToDoComparer());
        
            return Task.FromResult(todos);
        }

        /// <summary>
        /// Return a todo with a specific id from database.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public Task<ToDoDTO> GetAsync(string id) => Task.FromResult(Convert(_localStorage.Get<ToDo>(key: id)));

        /// <summary>
        /// Updates (or creates if not found) a ToDo item in the database.
        /// </summary>
        /// <param name="toDoDTO"></param>
        /// <returns></returns>
        public Task<ToDoDTO> UpdateAsync(ToDoDTO toDoDTO)
        {
            _localStorage.Store(toDoDTO.Id, Convert(toDoDTO));
            PersistRetry();
            return Task.FromResult(toDoDTO);
        }

        /// <summary>
        /// Deletes a todo item with a specific id.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public Task DeleteAsync(string id)
        {
            return Task.Factory.StartNew(() => {
                _localStorage.Remove(key: id);
                PersistRetry();
            });
        }

        /// <summary>
        /// Deletes the database with all the todo items.
        /// </summary>
        /// <returns></returns>
        public Task DeleteDatabaseAsync() => Task.Factory.StartNew(() => _localStorage.Destroy());
    }
}
